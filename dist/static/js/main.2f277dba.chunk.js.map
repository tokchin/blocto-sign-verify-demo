{"version":3,"sources":["Authenticate.js","SignUserMessage.js","GetLatestBlock.js","VerifyUserMessage.js","App.js","index.js"],"names":["Card","styled","div","SignInOutButton","loggedIn","user","signInOrOut","event","a","preventDefault","fcl","onClick","CurrentUser","useState","setUser","useEffect","subscribe","pre","GetLatestBlock","userMessage","setUserMessage","signedMessage","setSignedMessage","userAddress","setUserAddress","signUserMessage","str","hexMessage","Array","from","map","c","charCodeAt","toString","encodeURIComponent","replace","toLowerCase","join","compSignatures","window","parent","postMessage","message","value","signature","addr","type","onChange","console","log","target","VerifyUserMessage","Wrapper","App","Authenticate","SignUserMessage","put","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4SAIMA,EAAOC,IAAOC,IAAV,wHAOJC,EAAkB,SAAC,GAA4B,IAAlBC,EAAiB,EAAzBC,KAAQD,SAC3BE,EAAW,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDAClBD,EAAME,iBACFL,EACFM,MAEAA,MALgB,2CAAH,sDAQjB,OACE,wBAAQC,QAASL,EAAjB,SACGF,EAAW,WAAa,gBAmBhBQ,EAfK,WAAO,IAAD,EACAC,mBAAS,IADT,mBACjBR,EADiB,KACXS,EADW,KAQxB,OALAC,qBACE,kBAAML,MAAkBM,WAAU,SAACX,GAAD,OAAUS,EAAQ,eAAKT,SACzD,IAIA,cAACL,EAAD,UACE,cAAC,EAAD,CAAiBK,KAAMA,OChCvBL,EAAOC,IAAOC,IAAV,wHAOGD,IAAOgB,IAAV,uIAwDKC,I,QAAAA,EAhDQ,WAAO,IAAD,EACWL,mBAAS,eADpB,mBACpBM,EADoB,KACPC,EADO,OAEeP,mBAAS,MAFxB,mBAEpBQ,EAFoB,KAELC,EAFK,OAGWT,mBAAS,MAHpB,mBAGpBU,EAHoB,KAGPC,EAHO,KAKrBC,EAAe,uCAAG,WAAOlB,GAAP,iBAAAC,EAAA,6DACtBD,EAAME,iBA8BSiB,EA7BcP,EAAvBQ,EA8BDC,MAAMC,KAAKH,GACfI,KAAI,SAACC,GAAD,OACHA,EAAEC,WAAW,GAAK,IACdD,EAAEC,WAAW,GAAGC,SAAS,IACzBC,mBAAmBH,GAAGI,QAAQ,MAAO,IAAIC,iBAE9CC,KAAK,IAtCgB,SAIO3B,MAAkBe,gBAAgBE,GAJzC,OAIhBW,EAJgB,OAKtBC,OAAOC,OAAOC,YACZ,CAAEC,QAAS,iBAAkBC,MAAOL,GACpC,KAEFhB,EAAiBgB,EAAe,GAAGM,WACnCpB,EAAec,EAAe,GAAGO,MAVX,iCA+B1B,IAAmBnB,IA/BO,OAAH,sDAiBrB,OACE,eAAC,EAAD,WACE,6CAEE,uBAAOoB,KAAK,OAAOH,MAAOxB,EAAa4B,SATxB,SAACxC,GACpByC,QAAQC,IAAI1C,GACZa,EAAeb,EAAM2C,OAAOP,OAC5BK,QAAQC,IAAI,kBAAoB9B,SAQ9B,wBAAQR,QAASc,EAAjB,kBACA,uBANF,gBAOgBF,EACd,uBARF,YASYF,MC/CHpB,IAAOC,IAAV,wHAOGD,IAAOgB,IAAV,uICRGhB,IAAOC,IAAV,wHAOGD,IAAOgB,IAAV,uIA+EKkC,I,ECjFTC,EAAUnD,IAAOC,IAAV,8FAcEmD,MATf,WACE,OACE,eAACD,EAAD,WACE,cAACE,EAAD,IACA,cAACC,EAAD,QCXN7C,MAEG8C,IAAI,iBAAkB,qCACtBA,IAAI,sBAAuB,gDAE9BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2f277dba.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport * as fcl from \"@onflow/fcl\";\n\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst SignInOutButton = ({ user: { loggedIn } }) => {\n  const signInOrOut = async (event) => {\n    event.preventDefault();\n    if (loggedIn) {\n      fcl.unauthenticate();\n    } else {\n      fcl.authenticate();\n    }\n  };\n  return (\n    <button onClick={signInOrOut}>\n      {loggedIn ? \"Sign Out\" : \"Sign In/Up\"}\n    </button>\n  );\n};\nconst CurrentUser = () => {\n  const [user, setUser] = useState({});\n\n  useEffect(\n    () => fcl.currentUser().subscribe((user) => setUser({ ...user })),\n    []\n  );\n\n  return (\n    <Card>\n      <SignInOutButton user={user} />\n    </Card>\n  );\n};\n\nexport default CurrentUser;\n","import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst GetLatestBlock = () => {\n  const [userMessage, setUserMessage] = useState(\"userMessage\");\n  const [signedMessage, setSignedMessage] = useState(\"--\");\n  const [userAddress, setUserAddress] = useState(\"--\");\n\n  const signUserMessage = async (event) => {\n    event.preventDefault();\n    const hexMessage = utf8ToHex(userMessage);\n\n    const compSignatures = await fcl.currentUser().signUserMessage(hexMessage);\n    window.parent.postMessage(\n      { message: \"compSignatures\", value: compSignatures },\n      \"*\"\n    );\n    setSignedMessage(compSignatures[0].signature);\n    setUserAddress(compSignatures[0].addr);\n  };\n  const handleChange = (event) => {\n    console.log(event);\n    setUserMessage(event.target.value);\n    console.log(\"value changed: \" + userMessage);\n  };\n  return (\n    <Card>\n      <label>\n        message:\n        <input type=\"text\" value={userMessage} onChange={handleChange} />\n      </label>\n      <button onClick={signUserMessage}>Sign</button>\n      <br />\n      userAddress: {userAddress}\n      <br />\n      message: {signedMessage}\n    </Card>\n  );\n};\nfunction utf8ToHex(str) {\n  return Array.from(str)\n    .map((c) =>\n      c.charCodeAt(0) < 128\n        ? c.charCodeAt(0).toString(16)\n        : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()\n    )\n    .join(\"\");\n}\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\nexport default GetLatestBlock;\n","import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst GetLatestBlock = () => {\n  const [data, setData] = useState(null);\n\n  const runGetLatestBlock = async (event) => {\n    event.preventDefault();\n\n    const response = await fcl.send([fcl.getLatestBlock()]);\n\n    setData(await fcl.decode(response));\n  };\n\n  return (\n    <Card>\n      <button onClick={runGetLatestBlock}>Get Latest Block</button>\n\n      {data && <Code>{JSON.stringify(data, null, 2)}</Code>}\n    </Card>\n  );\n};\n\nexport default GetLatestBlock;\n","import React, { useState } from \"react\";\nimport * as fcl from \"@onflow/fcl\";\nimport styled from \"styled-components\";\nconst Card = styled.div`\n  margin: 10px 5px;\n  padding: 10px;\n  border: 1px solid #c0c0c0;\n  border-radius: 5px;\n`;\n\nconst Code = styled.pre`\n  background: #f0f0f0;\n  border-radius: 5px;\n  max-height: 150px;\n  overflow-y: auto;\n  padding: 5px;\n`;\n\nconst VerifyUserMessage = () => {\n  const [message, setMessage] = useState(\"address\");\n  const [signature, setSignature] = useState(\"signature\");\n  const [signedMessage, setSignedMessage] = useState(\"\");\n  const [userAddress, setUserAddress] = useState(\"\");\n  const [compositeSignature, setCompositeSignature] = useState({\n    f_type: \"CompositeSignature\",\n    f_vsn: \"1.0.0\",\n    addr: \"\",\n    keyId: 1,\n    signature: \"\",\n  });\n  const signUserMessage = async (event) => {\n    event.preventDefault();\n    const hexMessage = utf8ToHex(message);\n    console.log(\"signature to be verify\", compositeSignature);\n    const response = await fcl\n      .currentUser()\n      .verifyUserSignatures(hexMessage, [compositeSignature]);\n    console.log(response);\n  };\n  const updateSignature = (event) => {\n    setSignature(event.target.value);\n    compositeSignature.signature = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n  const updateUserAddress = (event) => {\n    setUserAddress(event.target.value);\n    compositeSignature.addr = event.target.value;\n    setCompositeSignature(compositeSignature);\n  };\n\n  const updateMessage = (event) => {\n    setMessage(event.target.value);\n  };\n\n  return (\n    <Card>\n      <label>\n        Signature:\n        <input type=\"text\" value={signature} onChange={updateSignature} />\n      </label>\n      <label>\n        Address:\n        <input type=\"text\" value={userAddress} onChange={updateUserAddress} />\n      </label>\n      <label>\n        Message:\n        <input type=\"text\" value={message} onChange={updateMessage} />\n      </label>\n      <button onClick={signUserMessage}>Sign</button>\n      <br />\n      userAddress: {userAddress}\n      <br />\n      message: {signedMessage}\n    </Card>\n  );\n};\nfunction utf8ToHex(str) {\n  return Array.from(str)\n    .map((c) =>\n      c.charCodeAt(0) < 128\n        ? c.charCodeAt(0).toString(16)\n        : encodeURIComponent(c).replace(/\\%/g, \"\").toLowerCase()\n    )\n    .join(\"\");\n}\nfunction hexToUtf8(hex) {\n  return decodeURIComponent(\"%\" + hex.match(/.{1,2}/g).join(\"%\"));\n}\n\nexport default VerifyUserMessage;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport Authenticate from \"./Authenticate.js\";\nimport SignUserMessage from \"./SignUserMessage.js\";\nimport GetLatestBlock from \"./GetLatestBlock.js\";\nimport VerifyUserMessage from \"./VerifyUserMessage\";\n\nconst Wrapper = styled.div`\n  font-size: 13px;\n  font-family: Arial, Helvetica, sans-serif;\n`;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Authenticate />\n      <SignUserMessage />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as fcl from \"@onflow/fcl\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nfcl\n  .config()\n  .put(\"accessNode.api\", \"https://access-testnet.onflow.org\")\n  .put(\"challenge.handshake\", \"https://flow-wallet-testnet.blocto.app/authn\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}